{
  "feature-module": {
    "displayName": "Feature Module ",
    "defaultPath": "dashboard/src/features",
    "folder": "{{namePlural}}",
    "questions": {
      "name": "Module name (singular, e.g. category)",
      "Name": "Module name PascalCase (e.g. Category)",
      "namePlural": "Module name plural (e.g. categories)",
      "NamePlural": "Module name plural PascalCase (e.g. Categories)"
    },
    "files": [
      {
        "name": "index.tsx",
        "content": ["// Dashboard feature entry point (empty for now)", ""]
      },
      {
        "name": "routes.tsx",
        "content": [
          "import { lazy } from 'react';",
          "",
          "const {{Name}}ListPage = lazy(() => import('./pages/{{name}}-list-page'));",
          "const {{Name}}CreatePage = lazy(() => import('./pages/{{name}}-create-page'));",
          "const {{Name}}UpdatePage = lazy(() => import('./pages/{{name}}-update-page'));",
          "const {{Name}}DetailsPage = lazy(() => import('./pages/{{name}}-details-page'));",
          "",
          "export const {{name}}Routes = [",
          "  {",
          "    index: true,",
          "    element: <{{Name}}ListPage />",
          "  },",
          "  {",
          "    path: 'create',",
          "    element: <{{Name}}CreatePage />",
          "  },",
          "  {",
          "    path: 'update/:id',",
          "    element: <{{Name}}UpdatePage />",
          "  },",
          "  {",
          "    path: ':id',",
          "    element: <{{Name}}DetailsPage />",
          "  }",
          "];",
          ""
        ]
      },
      {
        "name": "api/{{name}}.api.ts",
        "content": [
          "import axios from '@/lib/axios';",
          "import type { {{Name}}Schema } from '../schemas/{{name}}.schema';",
          "import type { {{Name}} } from '../types/{{name}}.types';",
          "import type { Pagination } from '@/types';",
          "",
          "// List {{namePlural}}",
          "export const get{{NamePlural}} = async (filters: { search?: string; page?: number; limit?: number }) => {",
          "  const { data } = await axios.get('/api/{{name}}/crm', { params: filters });",
          "  return data as { data: {{Name}}[]; pagination: Pagination };",
          "};",
          "",
          "// Get {{name}} by ID",
          "export const get{{Name}}ById = async (id: string) => {",
          "  const { data } = await axios.get(`/api/{{name}}/crm/${id}`);",
          "  return data?.data as {{Name}};",
          "};",
          "",
          "// Create {{name}}",
          "export const create{{Name}} = async (formData: FormData) => {",
          "  const { data } = await axios.post('/api/{{name}}', formData, {",
          "    headers: { 'Content-Type': 'multipart/form-data' },",
          "  });",
          "  return data;",
          "};",
          "",
          "// Update {{name}}",
          "export const update{{Name}} = async (id: string, formData: FormData) => {",
          "  const { data } = await axios.put(`/api/{{name}}/${id}`, formData, {",
          "    headers: { 'Content-Type': 'multipart/form-data' },",
          "  });",
          "  return data;",
          "};",
          "",
          "// Delete {{name}}",
          "export const delete{{Name}} = async (id: string) => {",
          "  const { data } = await axios.delete(`/api/{{name}}/${id}`);",
          "  return data;",
          "};",
          ""
        ]
      },
      {
        "name": "columns/{{name}}-columns.tsx",
        "content": [
          "import { type ColumnDef } from '@tanstack/react-table';",
          "import { type {{Name}} } from '../types/{{name}}.types';",
          "import { Button } from '@/components/ui/button';",
          "import { Link } from 'react-router-dom';",
          "",
          "export const use{{Name}}Columns = (refetch?: () => void): ColumnDef<{{Name}}>[] => [",
          "  {",
          "    accessorKey: 'title',",
          "    header: 'Title',",
          "    cell: ({ row }) => row.original.title.en,",
          "  },",
          "  {",
          "    accessorKey: 'createdAt',",
          "    header: 'Created At',",
          "    cell: ({ row }) => row.original.createdAt ? new Date(row.original.createdAt).toLocaleDateString() : '-',",
          "  },",
          "  {",
          "    id: 'actions',",
          "    header: 'Actions',",
          "    cell: ({ row }) => (",
          "      <div className=\"flex items-center gap-2\">",
          "        <Button variant=\"outline\" asChild>\n          <Link to={`../{{namePlural}}/${row.original._id}`}>View</Link>\n        </Button>",
          "      </div>\n    ),",
          "  },",
          "];",
          ""
        ]
      },
      {
        "name": "components/{{name}}-form.tsx",
        "content": [
          "import { useForm } from 'react-hook-form';",
          "import type { {{Name}}Schema } from '../schemas/{{name}}.schema';",
          "",
          "export type {{Name}}FormProps = {",
          "  defaultValues?: Partial<{{Name}}Schema>;",
          "  onSubmit: (values: {{Name}}Schema, file?: File) => void;",
          "  isLoading?: boolean;",
          "  submitLabel?: string;",
          "};",
          "",
          "export function {{Name}}Form({ defaultValues, onSubmit, isLoading, submitLabel = 'Save' }: {{Name}}FormProps) {",
          "  const methods = useForm<{{Name}}Schema>({ defaultValues });",
          "  const { handleSubmit, control } = methods;",
          "  return (",
          "    <form onSubmit={handleSubmit((values) => onSubmit(values))} className=\"space-y-6\">",
          "      {/* Add your form fields here */}\n      <button type=\"submit\" disabled={isLoading}>{submitLabel}</button>",
          "    </form>\n  );",
          "}",
          ""
        ]
      },
      {
        "name": "components/Delete{{Name}}Modal.tsx",
        "content": [
          "import { delete{{Name}} } from '../api/{{name}}.api';",
          "import { useModal } from '@/store/modal-store';",
          "import { Button } from '@/components/ui/button';",
          "",
          "export function Delete{{Name}}Modal() {",
          "  const { data, isOpen, type, onClose, refetch } = useModal();",
          "  const isModalOpen = isOpen && type === 'delete{{Name}}';",
          "  const handleDelete = async () => {",
          "    if (!data?.id) return;",
          "    await delete{{Name}}(data.id);",
          "    if (refetch) refetch();",
          "    onClose();",
          "  };",
          "  if (!isModalOpen) return null;",
          "  return (",
          "    <div>\n      <h2>Delete {{Name}}</h2>\n      <p>Are you sure you want to delete this {{name}}?</p>\n      <Button onClick={onClose}>Cancel</Button>\n      <Button onClick={handleDelete}>Delete</Button>\n    </div>\n  );",
          "}",
          ""
        ]
      },
      {
        "name": "pages/{{name}}-list-page.tsx",
        "content": [
          "import { useQuery } from '@tanstack/react-query';",
          "import { get{{NamePlural}} } from '../api/{{name}}.api';",
          "import { use{{Name}}Columns } from '../columns/{{name}}-columns';",
          "",
          "export default function {{Name}}ListPage() {",
          "  const { data, isLoading } = useQuery({",
          "    queryKey: ['{{namePlural}}'],",
          "    queryFn: () => get{{NamePlural}}({}),",
          "  });",
          "  const columns = use{{Name}}Columns();",
          "  return (",
          "    <div>\n      <h1>{{NamePlural}}</h1>\n      {/* Render your table here using columns and data?.data */}\n    </div>\n  );",
          "}",
          ""
        ]
      },
      {
        "name": "pages/{{name}}-create-page.tsx",
        "content": [
          "import { useMutation } from '@tanstack/react-query';",
          "import { create{{Name}} } from '../api/{{name}}.api';",
          "import { {{Name}}Form } from '../components/{{name}}-form';",
          "",
          "export default function {{Name}}CreatePage() {",
          "  const { mutateAsync, isPending } = useMutation({ mutationFn: create{{Name}} });",
          "  async function handleSubmit(values: any) {",
          "    const formData = new FormData();",
          "    // Append fields to formData",
          "    await mutateAsync(formData);",
          "  }",
          "  return (",
          "    <div>\n      <h1>Create {{Name}}</h1>\n      <{{Name}}Form onSubmit={handleSubmit} isLoading={isPending} submitLabel=\"Create\" />\n    </div>\n  );",
          "}",
          ""
        ]
      },
      {
        "name": "pages/{{name}}-update-page.tsx",
        "content": [
          "import { useParams } from 'react-router-dom';",
          "import { useQuery, useMutation } from '@tanstack/react-query';",
          "import { get{{Name}}ById, update{{Name}} } from '../api/{{name}}.api';",
          "import { {{Name}}Form } from '../components/{{name}}-form';",
          "",
          "export default function {{Name}}UpdatePage() {",
          "  const { id } = useParams();",
          "  const { data, isLoading } = useQuery({",
          "    queryKey: ['{{name}}', id],",
          "    queryFn: () => get{{Name}}ById(id),",
          "  });",
          "  const { mutateAsync, isPending } = useMutation({ mutationFn: (formData: FormData) => update{{Name}}(id, formData) });",
          "  async function handleSubmit(values: any) {",
          "    const formData = new FormData();",
          "    // Append fields to formData",
          "    await mutateAsync(formData);",
          "  }",
          "  if (isLoading) return <div>Loading...</div>;",
          "  return (",
          "    <div>\n      <h1>Update {{Name}}</h1>\n      <{{Name}}Form defaultValues={data} onSubmit={handleSubmit} isLoading={isPending} submitLabel=\"Update\" />\n    </div>\n  );",
          "}",
          ""
        ]
      },
      {
        "name": "pages/{{name}}-details-page.tsx",
        "content": [
          "import { useParams } from 'react-router-dom';",
          "import { useQuery } from '@tanstack/react-query';",
          "import { get{{Name}}ById } from '../api/{{name}}.api';",
          "",
          "export default function {{Name}}DetailsPage() {",
          "  const { id } = useParams();",
          "  const { data, isLoading } = useQuery({",
          "    queryKey: ['{{name}}', id],",
          "    queryFn: () => get{{Name}}ById(id),",
          "  });",
          "  if (isLoading) return <div>Loading...</div>;",
          "  if (!data) return <div>Not found</div>;",
          "  return (",
          "    <div>\n      <h1>{{Name}} Details</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );",
          "}",
          ""
        ]
      },
      {
        "name": "schemas/{{name}}.schema.ts",
        "content": [
          "import { z } from 'zod';",
          "",
          "export const {{name}}Schema = z.object({",
          "  title: z.object({",
          "    ar: z.string().min(1, 'Arabic title is required'),",
          "    en: z.string().min(1, 'English title is required'),",
          "  }),",
          "  status: z.boolean(),",
          "  createdAt: z.string().optional(),",
          "});",
          "",
          "export type {{Name}}Schema = z.infer<typeof {{name}}Schema>;",
          ""
        ]
      },
      {
        "name": "types/{{name}}.types.ts",
        "content": [
          "export type {{Name}} = {",
          "  _id?: string;",
          "  title: { ar: string; en: string };",
          "  status: boolean;",
          "  createdAt?: string;",
          "};",
          ""
        ]
      }
    ]
  }
}
